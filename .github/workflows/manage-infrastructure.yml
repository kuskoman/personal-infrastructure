name: "Terraform"

on:
  push:
    branches: ["master"]

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          tf_actions_working_dir: "terraform"
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Format
        run: terraform fmt -check ./terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: terraform

  set-kubeconfig:
    name: "Set Kubeconfig"
    runs-on: ubuntu-latest
    needs:
      - terraform
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          tf_actions_working_dir: "terraform"
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Save kubeconfig
        working-directory: terraform
        env:
          GH_TOKEN: ${{ env.GH_PAT }}
        run: SECRET_BODY=$(terraform output kubeconfig | grep -V EOT) gh secret set KUBECONFIG -b "$SECRET_BODY"
